precision mediump float;

uniform sampler2D uTexture;
uniform float uOpacity;
uniform float uRenderingOpacity;
uniform vec4 uFogColor;
uniform sampler2D uQuadOpacityMaskTexture;
uniform vec2 uViewportSize;
varying float vFogOpacity;

#ifdef HSVCorrection
uniform vec3 uHSVCorrection;

// from http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl
// conversion from rgb to hsv color space
vec3 rgb2hsv(vec3 c)
{
    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
// conversion from hsv to rgb color space
vec3 hsv2rgb(vec3 c)
{
    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
#endif

varying vec2 vTextureCoord;
void main() {
    vec4 color = texture2D(uTexture, vTextureCoord) * uOpacity;
#ifdef Fog
    color = color * (1.0 - vFogOpacity) + uFogColor * vFogOpacity;
#endif
#ifdef Greyscale
    // luminance based method
    float l = dot(vec3(0.21, 0.71, 0.07, color.rgb));
    color = vec4(l, l, l, color.a);
#endif
#ifdef QuadOpacityMask
    color = color * texture2D(uQuadOpacityMaskTexture, gl_FragCoord.xy / uViewportSize).a;
#endif
#ifdef HSVCorrection
    vec3 hsvColor = rgb2hsv(color.rgb);
    hsvColor *= uHSVCorrection;
    color.rgb = hsv2rgb(hsvColor);
#endif
#ifdef RenderingOpacity
    color = color * uRenderingOpacity;
#endif
    gl_FragColor = color;
}